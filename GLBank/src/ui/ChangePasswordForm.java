/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import database.ConnectionProvider;

/**
 *
 * @author Solanid
 */
public class ChangePasswordForm extends javax.swing.JDialog {
    private int idemp;
    
    /**
     * Creates new form ChangePasswordForm
     */
    public ChangePasswordForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        lblErrorBadPassword.setVisible(false);
        lblErrorDoNotMatch.setVisible(false);
        lblInvalidPassword.setVisible(false);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtOldPassword = new javax.swing.JLabel();
        txtNewPasword1 = new javax.swing.JLabel();
        txtNewPassword2 = new javax.swing.JLabel();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtOldPass = new javax.swing.JPasswordField();
        txtNewPass1 = new javax.swing.JPasswordField();
        txtNewPass2 = new javax.swing.JPasswordField();
        lblErrorDoNotMatch = new javax.swing.JLabel();
        lblErrorBadPassword = new javax.swing.JLabel();
        lblInvalidPassword = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtOldPassword.setText("Current password:");

        txtNewPasword1.setText("New password:");

        txtNewPassword2.setText("Confirm new password:");

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblErrorDoNotMatch.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorDoNotMatch.setText("Passwords do not match !");

        lblErrorBadPassword.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorBadPassword.setText("Incorrect password !");

        lblInvalidPassword.setForeground(new java.awt.Color(255, 51, 51));
        lblInvalidPassword.setText("Invalid password !");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirm))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNewPasword1)
                        .addGap(18, 18, 18)
                        .addComponent(txtNewPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtOldPassword)
                        .addGap(18, 18, 18)
                        .addComponent(txtOldPass, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNewPassword2)
                        .addGap(18, 18, 18)
                        .addComponent(txtNewPass2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorBadPassword)
                    .addComponent(lblInvalidPassword)
                    .addComponent(lblErrorDoNotMatch))
                .addGap(74, 74, 74))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOldPassword)
                    .addComponent(txtOldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorBadPassword)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewPass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewPasword1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInvalidPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewPassword2)
                    .addComponent(txtNewPass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorDoNotMatch)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnConfirm))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
       String oldPassword = new String(txtOldPass.getPassword());
       String newPassword1 = new String(txtNewPass1.getPassword());
       String newPassword2 = new String(txtNewPass2.getPassword());
       
       boolean validPassword = false;
       boolean samePasswords = newPassword1.equals(newPassword2);
       lblInvalidPassword.setVisible(false);
        if (samePasswords) {
            lblErrorDoNotMatch.setVisible(false);
            validPassword = isPasswordValid(newPassword1);
            if (!validPassword) {
                if (newPassword1.trim().length()==0) {
                    lblInvalidPassword.setText("Enter new password !");
                    lblInvalidPassword.setVisible(true);
                } else {
                    lblInvalidPassword.setText("Invalid password !");
                    lblInvalidPassword.setVisible(true);                    
                }
            }
        } else {
            lblErrorDoNotMatch.setVisible(true);
        }
        boolean correctOldPassword = new ConnectionProvider().isEmployeePasswordValid(idemp, oldPassword);
        if (correctOldPassword) {
            lblErrorBadPassword.setVisible(false);
        } else {
            lblErrorBadPassword.setVisible(true);
        }
        if (samePasswords && correctOldPassword && validPassword) {
            ConnectionProvider conn = new ConnectionProvider();
            conn.changePassword(idemp, newPassword1);
            this.dispose();
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChangePasswordForm dialog = new ChangePasswordForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JLabel lblErrorBadPassword;
    private javax.swing.JLabel lblErrorDoNotMatch;
    private javax.swing.JLabel lblInvalidPassword;
    private javax.swing.JPasswordField txtNewPass1;
    private javax.swing.JPasswordField txtNewPass2;
    private javax.swing.JLabel txtNewPassword2;
    private javax.swing.JLabel txtNewPasword1;
    private javax.swing.JPasswordField txtOldPass;
    private javax.swing.JLabel txtOldPassword;
    // End of variables declaration//GEN-END:variables
    
    private boolean isPasswordValid(String newPassword) {
        newPassword = newPassword.trim();
        if (newPassword.length()<6) {
            return false;
        }
        boolean lowLetter = false;
        boolean uppLetter = false;
        boolean digit = false;
        boolean nonAlphaNum = false;
        for (int i = 0; i < newPassword.length(); i++) {
            if (Character.isLowerCase(newPassword.charAt(i)))
                lowLetter = true;
            if (Character.isUpperCase(newPassword.charAt(i)))
                uppLetter = true;
            if (Character.isDigit(newPassword.charAt(i)))
                digit = true;
            if (!Character.isLetter(newPassword.charAt(i)) && !Character.isDigit(newPassword.charAt(i)))
                nonAlphaNum = true;
        }
        return lowLetter && uppLetter && digit && nonAlphaNum;
    }
    
}
